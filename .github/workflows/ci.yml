name: Atlas CI/CD Pipeline

on:
  push:
    branches: [ main, develop, atlas-production-ready-system ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.9'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git curl

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-xdist

    - name: Create test environment
      run: |
        cp env.template .env
        mkdir -p output/{articles,youtube,podcasts}
        mkdir -p logs

    - name: Run dependency validation
      run: python scripts/validate_dependencies.py --verbose

    - name: Run linting
      run: |
        pip install flake8
        flake8 helpers/ ask/ web/ scripts/ --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Run tests with coverage
      run: |
        python -m pytest \
          --cov=helpers \
          --cov=ask \
          --cov=web \
          --cov=scripts \
          --cov-report=xml \
          --cov-report=term-missing \
          --maxfail=5 \
          -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        pip install safety bandit

    - name: Check for security vulnerabilities
      run: safety check --json || true

    - name: Run bandit security linter
      run: bandit -r helpers/ ask/ web/ scripts/ -f json || true

  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install quality tools
      run: |
        pip install black isort mypy

    - name: Check code formatting with Black
      run: black --check --diff helpers/ ask/ web/ scripts/ || true

    - name: Check import sorting with isort
      run: isort --check-only --diff helpers/ ask/ web/ scripts/ || true

    - name: Run type checking with mypy
      run: mypy helpers/ ask/ web/ scripts/ --ignore-missing-imports || true

  build_docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        tags: atlas:latest 